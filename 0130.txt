触发器记录：
当前状态保存到old，即将执行（还未执行）后的状态保存到new
删除的时候没有new，插入的时候没有old
使用方式：old.字段名/new.字段名（new代表假设发生之后的结果）






代码执行结构：顺序结构，分支结构和循环结构

分支结构：mysql中只有if分支
基本语法： if 条件判断 then
		--满足条件要执行的代码
	   else
		-- 不满足条件要执行的代码
	   end if;


触发器结合if分支判断商品库存是否足够以生成订单（查看SQL文档）





循环结构 while（没有for循环）
语法：
while 条件判断 do 
    -- 满足条件要循环的代码
    -- 变更循环条件
end while;

不适合与触发器用，适合放在函数中


循环控制：子循环内部进行处理，判断和控制
mysql中没有continue 和 break，但是有iterate(迭代，类似continue)和leave(类似break)
使用：iterate/leave 循环名字；

定义循环名字：
循环名字:while 条件 do
       -- 循环体
       -- 循环控制
       leave/iterate 循环名字;
end while;









函数：封装，代码复用，分为系统函数和自定义函数



系统函数，直接调用，有返回值，所以用select调用
mysql中，字符串的基本操作单位（常见的是字符）
（mysql参考手册中有所有函数）


自定义函数：
create function 函数名（[形参]）returns 数据类型
begin
   -- 函数体
   -- 返回值：return 类型（指定的数据类型）;

end

自定义函数和系统函数的调用一样，用select


查看函数：
查看所有函数：show function status [like 'patttern'];

查看函数创建：show create function 函数名;

删除函数：函数不能修改只能先删后新建
drop function 函数名;




函数参数：形参和实参（实参可以是数值或者变量）
形参：必须制定数据类型

@定义的变量为全局变量

作用域：和C语言中的差不多
全局变量：使用set关键字定义，使用@ 符号标志
局部变量：使用declare关键字声明，没有@符号，而且所有的局部变量必须在函数体开始之前








存储过程：procedure
和函数功能一样，但是没有返回值

create procedure 过程名字（[参数列表]）
begin 
  -- 过程体
end


查看过程以及创建语句，删除等与函数一样，只是关键字不一样。

调用过程不能用select ，要用call

过程中的参数比函数更严格
有自己的三种类型限定：
in：数据从外部到内部，可以是数值或者变量
out:只允许过程内部使用，可以给外部床底数据，类似引用传递，只能是变量，但是外部的数据会被清空才能进入到内部
inout:外部和内部修改都有效，典型的引用传递，只能是变量


create procedure 过程名（in/out/inout 形参名字 数据类型,....）;

调用时out 和inout必须用变量，否则报错





